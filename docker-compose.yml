services:
  app:
    container_name: server
    depends_on:
      - db
    restart: always
    build:
      context: .
      dockerfile: ./docker/backend/Dockerfile
    entrypoint: [ "/home/app/docker/backend/server-entrypoint.sh" ]
    volumes:
      - static_volume:/home/app/backend/static
      - media_volume:/home/app/backend/media
    expose:
      - 8000
    env_file:
      - ./stage_projet/stage_projet/.env  

  nginx:
    container_name: nginx
    build: ./docker/nginx
    restart: always
    volumes:
      - static_volume:/home/app/backend/static
      - media_volume:/home/app/backend/media
    ports:
      - 4001:80 
    depends_on:
      - app
    logging:
      options:
        max-size: 10m

  redis:
    container_name: redis
    restart: always
    image: redis:7.0.5-alpine
    expose:
      - 6379

  deamons:
    container_name: celery-beat-deamons
    restart: always
    build:
      context: .
      dockerfile: ./docker/backend/Dockerfile
    entrypoint: [ "/home/app/docker/backend/daemon-entrypoint.sh" ]
    env_file:
      - ./stage_projet/stage_projet/.env
    depends_on:
      - app
      - redis
    volumes:
      - ./docker/supervisor/celery.conf:/etc/supervisor/conf.d/celery.conf
      - static_volume:/home/app/backend/static
      - media_volume:/home/app/backend/media

  db:
    image: postgres:latest
    container_name: postgres_container
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: test1
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data

  celery:
    build: ./stage_projet
    command: celery -A stage_projet worker --loglevel=info
    volumes:
      - ./stage_projet/usr/src/app/
    depends_on:
      - app
      - redis
  celery-beat:
    build: ./project
    command: celery -A stage_projet beat --loglevel=info
    volumes:
      - ./stage_projet/usr/src/app/
    depends_on:
      - app
      - redis

volumes:
  static_volume:
  media_volume:
  db_data:
